; ModuleID = 'euler3d.cu'
source_filename = "euler3d.cu"
target datalayout = "e-p:64:64-p1:64:64-p2:32:32-p3:32:32-p4:64:64-p5:32:32-p6:32:32-i64:64-v16:16-v24:32-v32:32-v48:64-v96:128-v192:256-v256:256-v512:512-v1024:1024-v2048:2048-n32:64-S32-A5-G1-ni:7"
target triple = "amdgcn-amd-amdhsa"

%struct.HIP_vector_type = type { %struct.HIP_vector_base }
%struct.HIP_vector_base = type { %union.anon }
%union.anon = type { %"struct.HIP_vector_base<float, 3>::Native_vec_" }
%"struct.HIP_vector_base<float, 3>::Native_vec_" = type { [3 x float] }

; Function Attrs: nofree norecurse nounwind
define protected amdgpu_kernel void @_Z25cuda_initialize_variablesiPfS_(i32 %0, float addrspace(1)* nocapture %1, float addrspace(1)* nocapture readonly %2) local_unnamed_addr #0 {
  %4 = tail call align 4 dereferenceable(64) i8 addrspace(4)* @llvm.amdgcn.dispatch.ptr() #3
  %5 = getelementptr i8, i8 addrspace(4)* %4, i64 4
  %6 = bitcast i8 addrspace(4)* %5 to i16 addrspace(4)*
  %7 = load i16, i16 addrspace(4)* %6, align 4, !range !4, !invariant.load !5
  %8 = tail call i32 @llvm.amdgcn.workgroup.id.x() #3
  %9 = zext i16 %7 to i32
  %10 = mul i32 %8, %9
  %11 = tail call i32 @llvm.amdgcn.workitem.id.x() #3, !range !6
  %12 = add i32 %10, %11
  %13 = bitcast float addrspace(1)* %2 to i32 addrspace(1)*
  %14 = load i32, i32 addrspace(1)* %13, align 4, !tbaa !7
  %15 = sext i32 %12 to i64
  %16 = getelementptr inbounds float, float addrspace(1)* %1, i64 %15
  %17 = bitcast float addrspace(1)* %16 to i32 addrspace(1)*
  store i32 %14, i32 addrspace(1)* %17, align 4, !tbaa !7
  %18 = getelementptr inbounds float, float addrspace(1)* %2, i64 1
  %19 = bitcast float addrspace(1)* %18 to i32 addrspace(1)*
  %20 = load i32, i32 addrspace(1)* %19, align 4, !tbaa !7
  %21 = add nsw i32 %12, %0
  %22 = sext i32 %21 to i64
  %23 = getelementptr inbounds float, float addrspace(1)* %1, i64 %22
  %24 = bitcast float addrspace(1)* %23 to i32 addrspace(1)*
  store i32 %20, i32 addrspace(1)* %24, align 4, !tbaa !7
  %25 = getelementptr inbounds float, float addrspace(1)* %2, i64 2
  %26 = bitcast float addrspace(1)* %25 to i32 addrspace(1)*
  %27 = load i32, i32 addrspace(1)* %26, align 4, !tbaa !7
  %28 = shl nsw i32 %0, 1
  %29 = add nsw i32 %12, %28
  %30 = sext i32 %29 to i64
  %31 = getelementptr inbounds float, float addrspace(1)* %1, i64 %30
  %32 = bitcast float addrspace(1)* %31 to i32 addrspace(1)*
  store i32 %27, i32 addrspace(1)* %32, align 4, !tbaa !7
  %33 = getelementptr inbounds float, float addrspace(1)* %2, i64 3
  %34 = bitcast float addrspace(1)* %33 to i32 addrspace(1)*
  %35 = load i32, i32 addrspace(1)* %34, align 4, !tbaa !7
  %36 = mul nsw i32 %0, 3
  %37 = add nsw i32 %12, %36
  %38 = sext i32 %37 to i64
  %39 = getelementptr inbounds float, float addrspace(1)* %1, i64 %38
  %40 = bitcast float addrspace(1)* %39 to i32 addrspace(1)*
  store i32 %35, i32 addrspace(1)* %40, align 4, !tbaa !7
  %41 = getelementptr inbounds float, float addrspace(1)* %2, i64 4
  %42 = bitcast float addrspace(1)* %41 to i32 addrspace(1)*
  %43 = load i32, i32 addrspace(1)* %42, align 4, !tbaa !7
  %44 = shl nsw i32 %0, 2
  %45 = add nsw i32 %12, %44
  %46 = sext i32 %45 to i64
  %47 = getelementptr inbounds float, float addrspace(1)* %1, i64 %46
  %48 = bitcast float addrspace(1)* %47 to i32 addrspace(1)*
  store i32 %43, i32 addrspace(1)* %48, align 4, !tbaa !7
  ret void
}

; Function Attrs: nofree norecurse nounwind
define protected amdgpu_kernel void @_Z24cuda_compute_step_factoriPfS_S_(i32 %0, float addrspace(1)* nocapture readonly %1, float addrspace(1)* nocapture readonly %2, float addrspace(1)* nocapture %3) local_unnamed_addr #0 {
  %5 = tail call align 4 dereferenceable(64) i8 addrspace(4)* @llvm.amdgcn.dispatch.ptr() #3
  %6 = getelementptr i8, i8 addrspace(4)* %5, i64 4
  %7 = bitcast i8 addrspace(4)* %6 to i16 addrspace(4)*
  %8 = load i16, i16 addrspace(4)* %7, align 4, !range !4, !invariant.load !5
  %9 = tail call i32 @llvm.amdgcn.workgroup.id.x() #3
  %10 = zext i16 %8 to i64
  %11 = zext i32 %9 to i64
  %12 = mul nuw nsw i64 %10, %11
  %13 = tail call i32 @llvm.amdgcn.workitem.id.x() #3, !range !6
  %14 = zext i32 %13 to i64
  %15 = add nuw nsw i64 %12, %14
  %16 = trunc i64 %15 to i32
  %17 = shl i64 %15, 32
  %18 = ashr exact i64 %17, 32
  %19 = getelementptr inbounds float, float addrspace(1)* %1, i64 %18
  %20 = load float, float addrspace(1)* %19, align 4, !tbaa !7
  %21 = add nsw i32 %16, %0
  %22 = sext i32 %21 to i64
  %23 = getelementptr inbounds float, float addrspace(1)* %1, i64 %22
  %24 = load float, float addrspace(1)* %23, align 4, !tbaa !7
  %25 = shl nsw i32 %0, 1
  %26 = add nsw i32 %25, %16
  %27 = sext i32 %26 to i64
  %28 = getelementptr inbounds float, float addrspace(1)* %1, i64 %27
  %29 = load float, float addrspace(1)* %28, align 4, !tbaa !7
  %30 = mul nsw i32 %0, 3
  %31 = add nsw i32 %30, %16
  %32 = sext i32 %31 to i64
  %33 = getelementptr inbounds float, float addrspace(1)* %1, i64 %32
  %34 = load float, float addrspace(1)* %33, align 4, !tbaa !7
  %35 = shl nsw i32 %0, 2
  %36 = add nsw i32 %35, %16
  %37 = sext i32 %36 to i64
  %38 = getelementptr inbounds float, float addrspace(1)* %1, i64 %37
  %39 = load float, float addrspace(1)* %38, align 4, !tbaa !7
  %40 = fdiv contract float %24, %20
  %41 = fdiv contract float %29, %20
  %42 = fdiv contract float %34, %20
  %43 = fmul contract float %40, %40
  %44 = fmul contract float %41, %41
  %45 = fadd contract float %43, %44
  %46 = fmul contract float %42, %42
  %47 = fadd contract float %45, %46
  %48 = fmul contract float %20, 5.000000e-01
  %49 = fmul contract float %48, %47
  %50 = fsub contract float %39, %49
  %51 = fmul contract float %50, 0x3FD9999980000000
  %52 = fmul contract float %51, 0x3FF6666660000000
  %53 = fdiv contract float %52, %20
  %54 = fcmp olt float %53, 0x39F0000000000000
  %55 = select i1 %54, float 0x41F0000000000000, float 1.000000e+00
  %56 = fmul float %53, %55
  %57 = tail call float @llvm.sqrt.f32(float %56) #3
  %58 = bitcast float %57 to i32
  %59 = add nsw i32 %58, -1
  %60 = bitcast i32 %59 to float
  %61 = add nsw i32 %58, 1
  %62 = bitcast i32 %61 to float
  %63 = tail call i1 @llvm.amdgcn.class.f32(float %56, i32 608) #3
  %64 = select i1 %54, float 0x3EF0000000000000, float 1.000000e+00
  %65 = fneg float %62
  %66 = tail call float @llvm.fma.f32(float %65, float %57, float %56) #3
  %67 = fcmp ogt float %66, 0.000000e+00
  %68 = fneg float %60
  %69 = tail call float @llvm.fma.f32(float %68, float %57, float %56) #3
  %70 = fcmp ole float %69, 0.000000e+00
  %71 = select i1 %70, float %60, float %57
  %72 = select i1 %67, float %62, float %71
  %73 = fmul float %64, %72
  %74 = select i1 %63, float %56, float %73
  %75 = getelementptr inbounds float, float addrspace(1)* %2, i64 %18
  %76 = load float, float addrspace(1)* %75, align 4, !tbaa !7
  %77 = fcmp olt float %76, 0x39F0000000000000
  %78 = select i1 %77, float 0x41F0000000000000, float 1.000000e+00
  %79 = fmul float %76, %78
  %80 = tail call float @llvm.sqrt.f32(float %79) #3
  %81 = bitcast float %80 to i32
  %82 = add nsw i32 %81, -1
  %83 = bitcast i32 %82 to float
  %84 = add nsw i32 %81, 1
  %85 = bitcast i32 %84 to float
  %86 = tail call i1 @llvm.amdgcn.class.f32(float %79, i32 608) #3
  %87 = select i1 %77, float 0x3EF0000000000000, float 1.000000e+00
  %88 = fneg float %85
  %89 = tail call float @llvm.fma.f32(float %88, float %80, float %79) #3
  %90 = fcmp ogt float %89, 0.000000e+00
  %91 = fneg float %83
  %92 = tail call float @llvm.fma.f32(float %91, float %80, float %79) #3
  %93 = fcmp ole float %92, 0.000000e+00
  %94 = select i1 %93, float %83, float %80
  %95 = select i1 %90, float %85, float %94
  %96 = fmul float %87, %95
  %97 = select i1 %86, float %79, float %96
  %98 = fcmp olt float %47, 0x39F0000000000000
  %99 = select i1 %98, float 0x41F0000000000000, float 1.000000e+00
  %100 = fmul float %47, %99
  %101 = tail call float @llvm.sqrt.f32(float %100) #3
  %102 = bitcast float %101 to i32
  %103 = add nsw i32 %102, -1
  %104 = bitcast i32 %103 to float
  %105 = add nsw i32 %102, 1
  %106 = bitcast i32 %105 to float
  %107 = tail call i1 @llvm.amdgcn.class.f32(float %100, i32 608) #3
  %108 = select i1 %98, float 0x3EF0000000000000, float 1.000000e+00
  %109 = fneg float %106
  %110 = tail call float @llvm.fma.f32(float %109, float %101, float %100) #3
  %111 = fcmp ogt float %110, 0.000000e+00
  %112 = fneg float %104
  %113 = tail call float @llvm.fma.f32(float %112, float %101, float %100) #3
  %114 = fcmp ole float %113, 0.000000e+00
  %115 = select i1 %114, float %104, float %101
  %116 = select i1 %111, float %106, float %115
  %117 = fmul float %108, %116
  %118 = select i1 %107, float %100, float %117
  %119 = fadd contract float %118, %74
  %120 = fmul contract float %97, %119
  %121 = fdiv contract float 5.000000e-01, %120
  %122 = getelementptr inbounds float, float addrspace(1)* %3, i64 %18
  store float %121, float addrspace(1)* %122, align 4, !tbaa !7
  ret void
}

; Function Attrs: nofree norecurse nounwind
define protected amdgpu_kernel void @_Z17cuda_compute_fluxiPiPfS0_S0_S0_P15HIP_vector_typeIfLj3EES3_(i32 %0, i32 addrspace(1)* nocapture readonly %1, float addrspace(1)* nocapture readonly %2, float addrspace(1)* nocapture readonly %3, float addrspace(1)* nocapture %4, float addrspace(1)* nocapture readonly %5, %struct.HIP_vector_type addrspace(1)* nocapture readonly %6, %struct.HIP_vector_type addrspace(1)* nocapture readonly %7) local_unnamed_addr #0 {
  %9 = tail call align 4 dereferenceable(64) i8 addrspace(4)* @llvm.amdgcn.dispatch.ptr() #3
  %10 = getelementptr i8, i8 addrspace(4)* %9, i64 4
  %11 = bitcast i8 addrspace(4)* %10 to i16 addrspace(4)*
  %12 = load i16, i16 addrspace(4)* %11, align 4, !range !4, !invariant.load !5
  %13 = tail call i32 @llvm.amdgcn.workgroup.id.x() #3
  %14 = zext i16 %12 to i64
  %15 = zext i32 %13 to i64
  %16 = mul nuw nsw i64 %14, %15
  %17 = tail call i32 @llvm.amdgcn.workitem.id.x() #3, !range !6
  %18 = zext i32 %17 to i64
  %19 = add nuw nsw i64 %16, %18
  %20 = trunc i64 %19 to i32
  %21 = shl i64 %19, 32
  %22 = ashr exact i64 %21, 32
  %23 = getelementptr inbounds float, float addrspace(1)* %3, i64 %22
  %24 = load float, float addrspace(1)* %23, align 4, !tbaa !7
  %25 = add nsw i32 %20, %0
  %26 = sext i32 %25 to i64
  %27 = getelementptr inbounds float, float addrspace(1)* %3, i64 %26
  %28 = load float, float addrspace(1)* %27, align 4, !tbaa !7
  %29 = shl nsw i32 %0, 1
  %30 = add nsw i32 %29, %20
  %31 = sext i32 %30 to i64
  %32 = getelementptr inbounds float, float addrspace(1)* %3, i64 %31
  %33 = load float, float addrspace(1)* %32, align 4, !tbaa !7
  %34 = mul nsw i32 %0, 3
  %35 = add nsw i32 %34, %20
  %36 = sext i32 %35 to i64
  %37 = getelementptr inbounds float, float addrspace(1)* %3, i64 %36
  %38 = load float, float addrspace(1)* %37, align 4, !tbaa !7
  %39 = shl nsw i32 %0, 2
  %40 = add nsw i32 %39, %20
  %41 = sext i32 %40 to i64
  %42 = getelementptr inbounds float, float addrspace(1)* %3, i64 %41
  %43 = load float, float addrspace(1)* %42, align 4, !tbaa !7
  %44 = fdiv contract float %28, %24
  %45 = fdiv contract float %33, %24
  %46 = fdiv contract float %38, %24
  %47 = fmul contract float %44, %44
  %48 = fmul contract float %45, %45
  %49 = fadd contract float %47, %48
  %50 = fmul contract float %46, %46
  %51 = fadd contract float %49, %50
  %52 = fcmp olt float %51, 0x39F0000000000000
  %53 = select i1 %52, float 0x41F0000000000000, float 1.000000e+00
  %54 = fmul float %51, %53
  %55 = tail call float @llvm.sqrt.f32(float %54) #3
  %56 = bitcast float %55 to i32
  %57 = add nsw i32 %56, -1
  %58 = bitcast i32 %57 to float
  %59 = add nsw i32 %56, 1
  %60 = bitcast i32 %59 to float
  %61 = tail call i1 @llvm.amdgcn.class.f32(float %54, i32 608) #3
  %62 = select i1 %52, float 0x3EF0000000000000, float 1.000000e+00
  %63 = fneg float %60
  %64 = tail call float @llvm.fma.f32(float %63, float %55, float %54) #3
  %65 = fcmp ogt float %64, 0.000000e+00
  %66 = fneg float %58
  %67 = tail call float @llvm.fma.f32(float %66, float %55, float %54) #3
  %68 = fcmp ole float %67, 0.000000e+00
  %69 = select i1 %68, float %58, float %55
  %70 = select i1 %65, float %60, float %69
  %71 = fmul float %62, %70
  %72 = select i1 %61, float %54, float %71
  %73 = fmul contract float %24, 5.000000e-01
  %74 = fmul contract float %73, %51
  %75 = fsub contract float %43, %74
  %76 = fmul contract float %75, 0x3FD9999980000000
  %77 = fmul contract float %76, 0x3FF6666660000000
  %78 = fdiv contract float %77, %24
  %79 = fcmp olt float %78, 0x39F0000000000000
  %80 = select i1 %79, float 0x41F0000000000000, float 1.000000e+00
  %81 = fmul float %78, %80
  %82 = tail call float @llvm.sqrt.f32(float %81) #3
  %83 = bitcast float %82 to i32
  %84 = add nsw i32 %83, -1
  %85 = bitcast i32 %84 to float
  %86 = add nsw i32 %83, 1
  %87 = bitcast i32 %86 to float
  %88 = tail call i1 @llvm.amdgcn.class.f32(float %81, i32 608) #3
  %89 = select i1 %79, float 0x3EF0000000000000, float 1.000000e+00
  %90 = fneg float %87
  %91 = tail call float @llvm.fma.f32(float %90, float %82, float %81) #3
  %92 = fcmp ogt float %91, 0.000000e+00
  %93 = fneg float %85
  %94 = tail call float @llvm.fma.f32(float %93, float %82, float %81) #3
  %95 = fcmp ole float %94, 0.000000e+00
  %96 = select i1 %95, float %85, float %82
  %97 = select i1 %92, float %87, float %96
  %98 = fmul float %89, %97
  %99 = select i1 %88, float %81, float %98
  %100 = fmul contract float %28, %44
  %101 = fadd contract float %100, %76
  %102 = fmul contract float %44, %33
  %103 = fmul contract float %44, %38
  %104 = fmul contract float %33, %45
  %105 = fadd contract float %104, %76
  %106 = fmul contract float %45, %38
  %107 = fmul contract float %38, %46
  %108 = fadd contract float %107, %76
  %109 = fadd contract float %43, %76
  %110 = fmul contract float %44, %109
  %111 = fmul contract float %45, %109
  %112 = fmul contract float %46, %109
  %113 = getelementptr inbounds float, float addrspace(1)* %5, i64 1
  %114 = getelementptr %struct.HIP_vector_type, %struct.HIP_vector_type addrspace(1)* %7, i64 0, i32 0, i32 0, i32 0, i32 0, i64 0
  %115 = getelementptr %struct.HIP_vector_type, %struct.HIP_vector_type addrspace(1)* %6, i64 0, i32 0, i32 0, i32 0, i32 0, i64 0
  %116 = getelementptr inbounds %struct.HIP_vector_type, %struct.HIP_vector_type addrspace(1)* %6, i64 1, i32 0, i32 0, i32 0, i32 0, i64 0
  %117 = getelementptr inbounds %struct.HIP_vector_type, %struct.HIP_vector_type addrspace(1)* %6, i64 2, i32 0, i32 0, i32 0, i32 0, i64 0
  %118 = getelementptr inbounds float, float addrspace(1)* %5, i64 2
  %119 = getelementptr inbounds %struct.HIP_vector_type, %struct.HIP_vector_type addrspace(1)* %7, i64 0, i32 0, i32 0, i32 0, i32 0, i64 1
  %120 = getelementptr inbounds %struct.HIP_vector_type, %struct.HIP_vector_type addrspace(1)* %6, i64 0, i32 0, i32 0, i32 0, i32 0, i64 1
  %121 = getelementptr inbounds %struct.HIP_vector_type, %struct.HIP_vector_type addrspace(1)* %6, i64 1, i32 0, i32 0, i32 0, i32 0, i64 1
  %122 = getelementptr inbounds %struct.HIP_vector_type, %struct.HIP_vector_type addrspace(1)* %6, i64 2, i32 0, i32 0, i32 0, i32 0, i64 1
  %123 = getelementptr inbounds float, float addrspace(1)* %5, i64 3
  %124 = getelementptr inbounds %struct.HIP_vector_type, %struct.HIP_vector_type addrspace(1)* %7, i64 0, i32 0, i32 0, i32 0, i32 0, i64 2
  %125 = getelementptr inbounds %struct.HIP_vector_type, %struct.HIP_vector_type addrspace(1)* %6, i64 0, i32 0, i32 0, i32 0, i32 0, i64 2
  %126 = getelementptr inbounds %struct.HIP_vector_type, %struct.HIP_vector_type addrspace(1)* %6, i64 1, i32 0, i32 0, i32 0, i32 0, i64 2
  %127 = getelementptr inbounds %struct.HIP_vector_type, %struct.HIP_vector_type addrspace(1)* %6, i64 2, i32 0, i32 0, i32 0, i32 0, i64 2
  %128 = shl i64 %19, 32
  %129 = ashr exact i64 %128, 32
  %130 = getelementptr inbounds i32, i32 addrspace(1)* %1, i64 %129
  %131 = load i32, i32 addrspace(1)* %130, align 4, !tbaa !11
  %132 = getelementptr inbounds float, float addrspace(1)* %2, i64 %129
  %133 = load float, float addrspace(1)* %132, align 4, !tbaa !7
  %134 = shl nsw i32 %0, 2
  %135 = add nsw i32 %134, %20
  %136 = sext i32 %135 to i64
  %137 = getelementptr inbounds float, float addrspace(1)* %2, i64 %136
  %138 = load float, float addrspace(1)* %137, align 4, !tbaa !7
  %139 = shl nsw i32 %0, 3
  %140 = add nsw i32 %139, %20
  %141 = sext i32 %140 to i64
  %142 = getelementptr inbounds float, float addrspace(1)* %2, i64 %141
  %143 = load float, float addrspace(1)* %142, align 4, !tbaa !7
  %144 = fmul contract float %133, %133
  %145 = fmul contract float %138, %138
  %146 = fadd contract float %144, %145
  %147 = fmul contract float %143, %143
  %148 = fadd contract float %146, %147
  %149 = fcmp olt float %148, 0x39F0000000000000
  %150 = select i1 %149, float 0x41F0000000000000, float 1.000000e+00
  %151 = fmul float %148, %150
  %152 = tail call float @llvm.sqrt.f32(float %151) #3
  %153 = bitcast float %152 to i32
  %154 = add nsw i32 %153, -1
  %155 = bitcast i32 %154 to float
  %156 = add nsw i32 %153, 1
  %157 = bitcast i32 %156 to float
  %158 = icmp sgt i32 %131, -1
  br i1 %158, label %159, label %326

159:                                              ; preds = %8
  %160 = tail call i1 @llvm.amdgcn.class.f32(float %151, i32 608) #3
  %161 = select i1 %149, float 0x3EF0000000000000, float 1.000000e+00
  %162 = fneg float %157
  %163 = tail call float @llvm.fma.f32(float %162, float %152, float %151) #3
  %164 = fcmp ogt float %163, 0.000000e+00
  %165 = fneg float %155
  %166 = tail call float @llvm.fma.f32(float %165, float %152, float %151) #3
  %167 = fcmp ole float %166, 0.000000e+00
  %168 = select i1 %167, float %155, float %152
  %169 = select i1 %164, float %157, float %168
  %170 = fmul float %161, %169
  %171 = select i1 %160, float %151, float %170
  %172 = zext i32 %131 to i64
  %173 = getelementptr inbounds float, float addrspace(1)* %3, i64 %172
  %174 = load float, float addrspace(1)* %173, align 4, !tbaa !7
  %175 = add nsw i32 %131, %0
  %176 = sext i32 %175 to i64
  %177 = getelementptr inbounds float, float addrspace(1)* %3, i64 %176
  %178 = load float, float addrspace(1)* %177, align 4, !tbaa !7
  %179 = add nsw i32 %131, %29
  %180 = sext i32 %179 to i64
  %181 = getelementptr inbounds float, float addrspace(1)* %3, i64 %180
  %182 = load float, float addrspace(1)* %181, align 4, !tbaa !7
  %183 = add nsw i32 %131, %34
  %184 = sext i32 %183 to i64
  %185 = getelementptr inbounds float, float addrspace(1)* %3, i64 %184
  %186 = load float, float addrspace(1)* %185, align 4, !tbaa !7
  %187 = add nsw i32 %131, %39
  %188 = sext i32 %187 to i64
  %189 = getelementptr inbounds float, float addrspace(1)* %3, i64 %188
  %190 = load float, float addrspace(1)* %189, align 4, !tbaa !7
  %191 = fdiv contract float %178, %174
  %192 = fdiv contract float %182, %174
  %193 = fdiv contract float %186, %174
  %194 = fmul contract float %191, %191
  %195 = fmul contract float %192, %192
  %196 = fadd contract float %194, %195
  %197 = fmul contract float %193, %193
  %198 = fadd contract float %196, %197
  %199 = fmul contract float %174, 5.000000e-01
  %200 = fmul contract float %199, %198
  %201 = fsub contract float %190, %200
  %202 = fmul contract float %201, 0x3FD9999980000000
  %203 = fmul contract float %202, 0x3FF6666660000000
  %204 = fdiv contract float %203, %174
  %205 = fcmp olt float %204, 0x39F0000000000000
  %206 = select i1 %205, float 0x41F0000000000000, float 1.000000e+00
  %207 = fmul float %204, %206
  %208 = tail call float @llvm.sqrt.f32(float %207) #3
  %209 = bitcast float %208 to i32
  %210 = add nsw i32 %209, -1
  %211 = bitcast i32 %210 to float
  %212 = add nsw i32 %209, 1
  %213 = bitcast i32 %212 to float
  %214 = tail call i1 @llvm.amdgcn.class.f32(float %207, i32 608) #3
  %215 = select i1 %205, float 0x3EF0000000000000, float 1.000000e+00
  %216 = fneg float %213
  %217 = tail call float @llvm.fma.f32(float %216, float %208, float %207) #3
  %218 = fcmp ogt float %217, 0.000000e+00
  %219 = fneg float %211
  %220 = tail call float @llvm.fma.f32(float %219, float %208, float %207) #3
  %221 = fcmp ole float %220, 0.000000e+00
  %222 = select i1 %221, float %211, float %208
  %223 = select i1 %218, float %213, float %222
  %224 = fmul float %215, %223
  %225 = select i1 %214, float %207, float %224
  %226 = fmul contract float %178, %191
  %227 = fadd contract float %226, %202
  %228 = fmul contract float %191, %182
  %229 = fmul contract float %191, %186
  %230 = fmul contract float %182, %192
  %231 = fadd contract float %230, %202
  %232 = fmul contract float %192, %186
  %233 = fmul contract float %186, %193
  %234 = fadd contract float %233, %202
  %235 = fadd contract float %190, %202
  %236 = fmul contract float %191, %235
  %237 = fmul contract float %192, %235
  %238 = fmul contract float %193, %235
  %239 = fmul contract float %171, 0xBFC99999A0000000
  %240 = fmul contract float %239, 5.000000e-01
  %241 = fcmp olt float %198, 0x39F0000000000000
  %242 = select i1 %241, float 0x41F0000000000000, float 1.000000e+00
  %243 = fmul float %198, %242
  %244 = tail call float @llvm.sqrt.f32(float %243) #3
  %245 = bitcast float %244 to i32
  %246 = add nsw i32 %245, -1
  %247 = bitcast i32 %246 to float
  %248 = add nsw i32 %245, 1
  %249 = bitcast i32 %248 to float
  %250 = tail call i1 @llvm.amdgcn.class.f32(float %243, i32 608) #3
  %251 = select i1 %241, float 0x3EF0000000000000, float 1.000000e+00
  %252 = fneg float %249
  %253 = tail call float @llvm.fma.f32(float %252, float %244, float %243) #3
  %254 = fcmp ogt float %253, 0.000000e+00
  %255 = fneg float %247
  %256 = tail call float @llvm.fma.f32(float %255, float %244, float %243) #3
  %257 = fcmp ole float %256, 0.000000e+00
  %258 = select i1 %257, float %247, float %244
  %259 = select i1 %254, float %249, float %258
  %260 = fmul float %251, %259
  %261 = select i1 %250, float %243, float %260
  %262 = fadd contract float %72, %261
  %263 = fadd contract float %99, %262
  %264 = fadd contract float %263, %225
  %265 = fmul contract float %240, %264
  %266 = fsub contract float %24, %174
  %267 = fmul contract float %266, %265
  %268 = fadd contract float %267, 0.000000e+00
  %269 = fsub contract float %43, %190
  %270 = fmul contract float %269, %265
  %271 = fadd contract float %270, 0.000000e+00
  %272 = fsub contract float %28, %178
  %273 = fmul contract float %272, %265
  %274 = fadd contract float %273, 0.000000e+00
  %275 = fsub contract float %33, %182
  %276 = fmul contract float %275, %265
  %277 = fadd contract float %276, 0.000000e+00
  %278 = fsub contract float %38, %186
  %279 = fmul contract float %278, %265
  %280 = fadd contract float %279, 0.000000e+00
  %281 = fmul contract float %133, 5.000000e-01
  %282 = fadd contract float %28, %178
  %283 = fmul contract float %281, %282
  %284 = fadd contract float %283, %268
  %285 = fadd contract float %110, %236
  %286 = fmul contract float %281, %285
  %287 = fadd contract float %286, %271
  %288 = fadd contract float %101, %227
  %289 = fmul contract float %281, %288
  %290 = fadd contract float %289, %274
  %291 = fadd contract float %102, %228
  %292 = fmul contract float %281, %291
  %293 = fadd contract float %292, %277
  %294 = fadd contract float %103, %229
  %295 = fmul contract float %281, %294
  %296 = fadd contract float %295, %280
  %297 = fmul contract float %138, 5.000000e-01
  %298 = fadd contract float %33, %182
  %299 = fmul contract float %297, %298
  %300 = fadd contract float %299, %284
  %301 = fadd contract float %111, %237
  %302 = fmul contract float %297, %301
  %303 = fadd contract float %302, %287
  %304 = fmul contract float %297, %291
  %305 = fadd contract float %304, %290
  %306 = fadd contract float %105, %231
  %307 = fmul contract float %297, %306
  %308 = fadd contract float %307, %293
  %309 = fadd contract float %106, %232
  %310 = fmul contract float %297, %309
  %311 = fadd contract float %310, %296
  %312 = fmul contract float %143, 5.000000e-01
  %313 = fadd contract float %38, %186
  %314 = fmul contract float %312, %313
  %315 = fadd contract float %314, %300
  %316 = fadd contract float %112, %238
  %317 = fmul contract float %312, %316
  %318 = fadd contract float %317, %303
  %319 = fmul contract float %312, %294
  %320 = fadd contract float %319, %305
  %321 = fmul contract float %312, %309
  %322 = fadd contract float %321, %308
  %323 = fadd contract float %108, %234
  %324 = fmul contract float %312, %323
  %325 = fadd contract float %324, %311
  br label %398

326:                                              ; preds = %8
  switch i32 %131, label %398 [
    i32 -1, label %327
    i32 -2, label %334
  ]

327:                                              ; preds = %326
  %328 = fmul contract float %76, %133
  %329 = fadd contract float %328, 0.000000e+00
  %330 = fmul contract float %76, %138
  %331 = fadd contract float %330, 0.000000e+00
  %332 = fmul contract float %76, %143
  %333 = fadd contract float %332, 0.000000e+00
  br label %398

334:                                              ; preds = %326
  %335 = fmul contract float %133, 5.000000e-01
  %336 = load float, float addrspace(1)* %113, align 4, !tbaa !7
  %337 = fadd contract float %28, %336
  %338 = fmul contract float %335, %337
  %339 = fadd contract float %338, 0.000000e+00
  %340 = load float, float addrspace(1)* %114, align 4, !tbaa !13
  %341 = fadd contract float %110, %340
  %342 = fmul contract float %335, %341
  %343 = fadd contract float %342, 0.000000e+00
  %344 = load float, float addrspace(1)* %115, align 4, !tbaa !13
  %345 = fadd contract float %101, %344
  %346 = fmul contract float %335, %345
  %347 = fadd contract float %346, 0.000000e+00
  %348 = load float, float addrspace(1)* %116, align 4, !tbaa !13
  %349 = fadd contract float %102, %348
  %350 = fmul contract float %335, %349
  %351 = fadd contract float %350, 0.000000e+00
  %352 = load float, float addrspace(1)* %117, align 4, !tbaa !13
  %353 = fadd contract float %103, %352
  %354 = fmul contract float %335, %353
  %355 = fadd contract float %354, 0.000000e+00
  %356 = fmul contract float %138, 5.000000e-01
  %357 = load float, float addrspace(1)* %118, align 4, !tbaa !7
  %358 = fadd contract float %33, %357
  %359 = fmul contract float %356, %358
  %360 = fadd contract float %339, %359
  %361 = load float, float addrspace(1)* %119, align 4, !tbaa !13
  %362 = fadd contract float %111, %361
  %363 = fmul contract float %356, %362
  %364 = fadd contract float %343, %363
  %365 = load float, float addrspace(1)* %120, align 4, !tbaa !13
  %366 = fadd contract float %102, %365
  %367 = fmul contract float %356, %366
  %368 = fadd contract float %347, %367
  %369 = load float, float addrspace(1)* %121, align 4, !tbaa !13
  %370 = fadd contract float %105, %369
  %371 = fmul contract float %356, %370
  %372 = fadd contract float %351, %371
  %373 = load float, float addrspace(1)* %122, align 4, !tbaa !13
  %374 = fadd contract float %106, %373
  %375 = fmul contract float %356, %374
  %376 = fadd contract float %355, %375
  %377 = fmul contract float %143, 5.000000e-01
  %378 = load float, float addrspace(1)* %123, align 4, !tbaa !7
  %379 = fadd contract float %38, %378
  %380 = fmul contract float %377, %379
  %381 = fadd contract float %360, %380
  %382 = load float, float addrspace(1)* %124, align 4, !tbaa !13
  %383 = fadd contract float %112, %382
  %384 = fmul contract float %377, %383
  %385 = fadd contract float %364, %384
  %386 = load float, float addrspace(1)* %125, align 4, !tbaa !13
  %387 = fadd contract float %103, %386
  %388 = fmul contract float %377, %387
  %389 = fadd contract float %368, %388
  %390 = load float, float addrspace(1)* %126, align 4, !tbaa !13
  %391 = fadd contract float %106, %390
  %392 = fmul contract float %377, %391
  %393 = fadd contract float %372, %392
  %394 = load float, float addrspace(1)* %127, align 4, !tbaa !13
  %395 = fadd contract float %108, %394
  %396 = fmul contract float %377, %395
  %397 = fadd contract float %376, %396
  br label %398

398:                                              ; preds = %326, %159, %334, %327
  %399 = phi float [ %315, %159 ], [ 0.000000e+00, %327 ], [ %381, %334 ], [ 0.000000e+00, %326 ]
  %400 = phi float [ %325, %159 ], [ %333, %327 ], [ %397, %334 ], [ 0.000000e+00, %326 ]
  %401 = phi float [ %322, %159 ], [ %331, %327 ], [ %393, %334 ], [ 0.000000e+00, %326 ]
  %402 = phi float [ %320, %159 ], [ %329, %327 ], [ %389, %334 ], [ 0.000000e+00, %326 ]
  %403 = phi float [ %318, %159 ], [ 0.000000e+00, %327 ], [ %385, %334 ], [ 0.000000e+00, %326 ]
  %404 = getelementptr inbounds i32, i32 addrspace(1)* %1, i64 %26
  %405 = load i32, i32 addrspace(1)* %404, align 4, !tbaa !11
  %406 = getelementptr inbounds float, float addrspace(1)* %2, i64 %26
  %407 = load float, float addrspace(1)* %406, align 4, !tbaa !7
  %408 = mul nsw i32 %0, 5
  %409 = add nsw i32 %408, %20
  %410 = sext i32 %409 to i64
  %411 = getelementptr inbounds float, float addrspace(1)* %2, i64 %410
  %412 = load float, float addrspace(1)* %411, align 4, !tbaa !7
  %413 = mul nsw i32 %0, 9
  %414 = add nsw i32 %413, %20
  %415 = sext i32 %414 to i64
  %416 = getelementptr inbounds float, float addrspace(1)* %2, i64 %415
  %417 = load float, float addrspace(1)* %416, align 4, !tbaa !7
  %418 = fmul contract float %407, %407
  %419 = fmul contract float %412, %412
  %420 = fadd contract float %418, %419
  %421 = fmul contract float %417, %417
  %422 = fadd contract float %420, %421
  %423 = fcmp olt float %422, 0x39F0000000000000
  %424 = select i1 %423, float 0x41F0000000000000, float 1.000000e+00
  %425 = fmul float %422, %424
  %426 = tail call float @llvm.sqrt.f32(float %425) #3
  %427 = bitcast float %426 to i32
  %428 = add nsw i32 %427, -1
  %429 = bitcast i32 %428 to float
  %430 = add nsw i32 %427, 1
  %431 = bitcast i32 %430 to float
  %432 = icmp sgt i32 %405, -1
  br i1 %432, label %505, label %433

433:                                              ; preds = %398
  switch i32 %405, label %672 [
    i32 -1, label %498
    i32 -2, label %434
  ]

434:                                              ; preds = %433
  %435 = fmul contract float %407, 5.000000e-01
  %436 = load float, float addrspace(1)* %113, align 4, !tbaa !7
  %437 = fadd contract float %28, %436
  %438 = fmul contract float %435, %437
  %439 = fadd contract float %399, %438
  %440 = load float, float addrspace(1)* %114, align 4, !tbaa !13
  %441 = fadd contract float %110, %440
  %442 = fmul contract float %435, %441
  %443 = fadd contract float %403, %442
  %444 = load float, float addrspace(1)* %115, align 4, !tbaa !13
  %445 = fadd contract float %101, %444
  %446 = fmul contract float %435, %445
  %447 = fadd contract float %402, %446
  %448 = load float, float addrspace(1)* %116, align 4, !tbaa !13
  %449 = fadd contract float %102, %448
  %450 = fmul contract float %435, %449
  %451 = fadd contract float %401, %450
  %452 = load float, float addrspace(1)* %117, align 4, !tbaa !13
  %453 = fadd contract float %103, %452
  %454 = fmul contract float %435, %453
  %455 = fadd contract float %400, %454
  %456 = fmul contract float %412, 5.000000e-01
  %457 = load float, float addrspace(1)* %118, align 4, !tbaa !7
  %458 = fadd contract float %33, %457
  %459 = fmul contract float %456, %458
  %460 = fadd contract float %439, %459
  %461 = load float, float addrspace(1)* %119, align 4, !tbaa !13
  %462 = fadd contract float %111, %461
  %463 = fmul contract float %456, %462
  %464 = fadd contract float %443, %463
  %465 = load float, float addrspace(1)* %120, align 4, !tbaa !13
  %466 = fadd contract float %102, %465
  %467 = fmul contract float %456, %466
  %468 = fadd contract float %447, %467
  %469 = load float, float addrspace(1)* %121, align 4, !tbaa !13
  %470 = fadd contract float %105, %469
  %471 = fmul contract float %456, %470
  %472 = fadd contract float %451, %471
  %473 = load float, float addrspace(1)* %122, align 4, !tbaa !13
  %474 = fadd contract float %106, %473
  %475 = fmul contract float %456, %474
  %476 = fadd contract float %455, %475
  %477 = fmul contract float %417, 5.000000e-01
  %478 = load float, float addrspace(1)* %123, align 4, !tbaa !7
  %479 = fadd contract float %38, %478
  %480 = fmul contract float %477, %479
  %481 = fadd contract float %460, %480
  %482 = load float, float addrspace(1)* %124, align 4, !tbaa !13
  %483 = fadd contract float %112, %482
  %484 = fmul contract float %477, %483
  %485 = fadd contract float %464, %484
  %486 = load float, float addrspace(1)* %125, align 4, !tbaa !13
  %487 = fadd contract float %103, %486
  %488 = fmul contract float %477, %487
  %489 = fadd contract float %468, %488
  %490 = load float, float addrspace(1)* %126, align 4, !tbaa !13
  %491 = fadd contract float %106, %490
  %492 = fmul contract float %477, %491
  %493 = fadd contract float %472, %492
  %494 = load float, float addrspace(1)* %127, align 4, !tbaa !13
  %495 = fadd contract float %108, %494
  %496 = fmul contract float %477, %495
  %497 = fadd contract float %476, %496
  br label %672

498:                                              ; preds = %433
  %499 = fmul contract float %76, %407
  %500 = fadd contract float %402, %499
  %501 = fmul contract float %76, %412
  %502 = fadd contract float %401, %501
  %503 = fmul contract float %76, %417
  %504 = fadd contract float %400, %503
  br label %672

505:                                              ; preds = %398
  %506 = tail call i1 @llvm.amdgcn.class.f32(float %425, i32 608) #3
  %507 = select i1 %423, float 0x3EF0000000000000, float 1.000000e+00
  %508 = fneg float %431
  %509 = tail call float @llvm.fma.f32(float %508, float %426, float %425) #3
  %510 = fcmp ogt float %509, 0.000000e+00
  %511 = fneg float %429
  %512 = tail call float @llvm.fma.f32(float %511, float %426, float %425) #3
  %513 = fcmp ole float %512, 0.000000e+00
  %514 = select i1 %513, float %429, float %426
  %515 = select i1 %510, float %431, float %514
  %516 = fmul float %507, %515
  %517 = select i1 %506, float %425, float %516
  %518 = zext i32 %405 to i64
  %519 = getelementptr inbounds float, float addrspace(1)* %3, i64 %518
  %520 = load float, float addrspace(1)* %519, align 4, !tbaa !7
  %521 = add nsw i32 %405, %0
  %522 = sext i32 %521 to i64
  %523 = getelementptr inbounds float, float addrspace(1)* %3, i64 %522
  %524 = load float, float addrspace(1)* %523, align 4, !tbaa !7
  %525 = add nsw i32 %405, %29
  %526 = sext i32 %525 to i64
  %527 = getelementptr inbounds float, float addrspace(1)* %3, i64 %526
  %528 = load float, float addrspace(1)* %527, align 4, !tbaa !7
  %529 = add nsw i32 %405, %34
  %530 = sext i32 %529 to i64
  %531 = getelementptr inbounds float, float addrspace(1)* %3, i64 %530
  %532 = load float, float addrspace(1)* %531, align 4, !tbaa !7
  %533 = add nsw i32 %405, %39
  %534 = sext i32 %533 to i64
  %535 = getelementptr inbounds float, float addrspace(1)* %3, i64 %534
  %536 = load float, float addrspace(1)* %535, align 4, !tbaa !7
  %537 = fdiv contract float %524, %520
  %538 = fdiv contract float %528, %520
  %539 = fdiv contract float %532, %520
  %540 = fmul contract float %537, %537
  %541 = fmul contract float %538, %538
  %542 = fadd contract float %540, %541
  %543 = fmul contract float %539, %539
  %544 = fadd contract float %542, %543
  %545 = fmul contract float %520, 5.000000e-01
  %546 = fmul contract float %545, %544
  %547 = fsub contract float %536, %546
  %548 = fmul contract float %547, 0x3FD9999980000000
  %549 = fmul contract float %548, 0x3FF6666660000000
  %550 = fdiv contract float %549, %520
  %551 = fcmp olt float %550, 0x39F0000000000000
  %552 = select i1 %551, float 0x41F0000000000000, float 1.000000e+00
  %553 = fmul float %550, %552
  %554 = tail call float @llvm.sqrt.f32(float %553) #3
  %555 = bitcast float %554 to i32
  %556 = add nsw i32 %555, -1
  %557 = bitcast i32 %556 to float
  %558 = add nsw i32 %555, 1
  %559 = bitcast i32 %558 to float
  %560 = tail call i1 @llvm.amdgcn.class.f32(float %553, i32 608) #3
  %561 = select i1 %551, float 0x3EF0000000000000, float 1.000000e+00
  %562 = fneg float %559
  %563 = tail call float @llvm.fma.f32(float %562, float %554, float %553) #3
  %564 = fcmp ogt float %563, 0.000000e+00
  %565 = fneg float %557
  %566 = tail call float @llvm.fma.f32(float %565, float %554, float %553) #3
  %567 = fcmp ole float %566, 0.000000e+00
  %568 = select i1 %567, float %557, float %554
  %569 = select i1 %564, float %559, float %568
  %570 = fmul float %561, %569
  %571 = select i1 %560, float %553, float %570
  %572 = fmul contract float %524, %537
  %573 = fadd contract float %572, %548
  %574 = fmul contract float %537, %528
  %575 = fmul contract float %537, %532
  %576 = fmul contract float %528, %538
  %577 = fadd contract float %576, %548
  %578 = fmul contract float %538, %532
  %579 = fmul contract float %532, %539
  %580 = fadd contract float %579, %548
  %581 = fadd contract float %536, %548
  %582 = fmul contract float %537, %581
  %583 = fmul contract float %538, %581
  %584 = fmul contract float %539, %581
  %585 = fmul contract float %517, 0xBFC99999A0000000
  %586 = fmul contract float %585, 5.000000e-01
  %587 = fcmp olt float %544, 0x39F0000000000000
  %588 = select i1 %587, float 0x41F0000000000000, float 1.000000e+00
  %589 = fmul float %544, %588
  %590 = tail call float @llvm.sqrt.f32(float %589) #3
  %591 = bitcast float %590 to i32
  %592 = add nsw i32 %591, -1
  %593 = bitcast i32 %592 to float
  %594 = add nsw i32 %591, 1
  %595 = bitcast i32 %594 to float
  %596 = tail call i1 @llvm.amdgcn.class.f32(float %589, i32 608) #3
  %597 = select i1 %587, float 0x3EF0000000000000, float 1.000000e+00
  %598 = fneg float %595
  %599 = tail call float @llvm.fma.f32(float %598, float %590, float %589) #3
  %600 = fcmp ogt float %599, 0.000000e+00
  %601 = fneg float %593
  %602 = tail call float @llvm.fma.f32(float %601, float %590, float %589) #3
  %603 = fcmp ole float %602, 0.000000e+00
  %604 = select i1 %603, float %593, float %590
  %605 = select i1 %600, float %595, float %604
  %606 = fmul float %597, %605
  %607 = select i1 %596, float %589, float %606
  %608 = fadd contract float %72, %607
  %609 = fadd contract float %99, %608
  %610 = fadd contract float %609, %571
  %611 = fmul contract float %586, %610
  %612 = fsub contract float %24, %520
  %613 = fmul contract float %612, %611
  %614 = fadd contract float %399, %613
  %615 = fsub contract float %43, %536
  %616 = fmul contract float %615, %611
  %617 = fadd contract float %403, %616
  %618 = fsub contract float %28, %524
  %619 = fmul contract float %618, %611
  %620 = fadd contract float %402, %619
  %621 = fsub contract float %33, %528
  %622 = fmul contract float %621, %611
  %623 = fadd contract float %401, %622
  %624 = fsub contract float %38, %532
  %625 = fmul contract float %624, %611
  %626 = fadd contract float %400, %625
  %627 = fmul contract float %407, 5.000000e-01
  %628 = fadd contract float %28, %524
  %629 = fmul contract float %627, %628
  %630 = fadd contract float %629, %614
  %631 = fadd contract float %110, %582
  %632 = fmul contract float %627, %631
  %633 = fadd contract float %632, %617
  %634 = fadd contract float %101, %573
  %635 = fmul contract float %627, %634
  %636 = fadd contract float %635, %620
  %637 = fadd contract float %102, %574
  %638 = fmul contract float %627, %637
  %639 = fadd contract float %638, %623
  %640 = fadd contract float %103, %575
  %641 = fmul contract float %627, %640
  %642 = fadd contract float %641, %626
  %643 = fmul contract float %412, 5.000000e-01
  %644 = fadd contract float %33, %528
  %645 = fmul contract float %643, %644
  %646 = fadd contract float %645, %630
  %647 = fadd contract float %111, %583
  %648 = fmul contract float %643, %647
  %649 = fadd contract float %648, %633
  %650 = fmul contract float %643, %637
  %651 = fadd contract float %650, %636
  %652 = fadd contract float %105, %577
  %653 = fmul contract float %643, %652
  %654 = fadd contract float %653, %639
  %655 = fadd contract float %106, %578
  %656 = fmul contract float %643, %655
  %657 = fadd contract float %656, %642
  %658 = fmul contract float %417, 5.000000e-01
  %659 = fadd contract float %38, %532
  %660 = fmul contract float %658, %659
  %661 = fadd contract float %660, %646
  %662 = fadd contract float %112, %584
  %663 = fmul contract float %658, %662
  %664 = fadd contract float %663, %649
  %665 = fmul contract float %658, %640
  %666 = fadd contract float %665, %651
  %667 = fmul contract float %658, %655
  %668 = fadd contract float %667, %654
  %669 = fadd contract float %108, %580
  %670 = fmul contract float %658, %669
  %671 = fadd contract float %670, %657
  br label %672

672:                                              ; preds = %505, %498, %434, %433
  %673 = phi float [ %661, %505 ], [ %399, %498 ], [ %481, %434 ], [ %399, %433 ]
  %674 = phi float [ %671, %505 ], [ %504, %498 ], [ %497, %434 ], [ %400, %433 ]
  %675 = phi float [ %668, %505 ], [ %502, %498 ], [ %493, %434 ], [ %401, %433 ]
  %676 = phi float [ %666, %505 ], [ %500, %498 ], [ %489, %434 ], [ %402, %433 ]
  %677 = phi float [ %664, %505 ], [ %403, %498 ], [ %485, %434 ], [ %403, %433 ]
  %678 = shl nsw i32 %0, 1
  %679 = add nsw i32 %678, %20
  %680 = sext i32 %679 to i64
  %681 = getelementptr inbounds i32, i32 addrspace(1)* %1, i64 %680
  %682 = load i32, i32 addrspace(1)* %681, align 4, !tbaa !11
  %683 = getelementptr inbounds float, float addrspace(1)* %2, i64 %680
  %684 = load float, float addrspace(1)* %683, align 4, !tbaa !7
  %685 = mul nsw i32 %0, 6
  %686 = add nsw i32 %685, %20
  %687 = sext i32 %686 to i64
  %688 = getelementptr inbounds float, float addrspace(1)* %2, i64 %687
  %689 = load float, float addrspace(1)* %688, align 4, !tbaa !7
  %690 = mul nsw i32 %0, 10
  %691 = add nsw i32 %690, %20
  %692 = sext i32 %691 to i64
  %693 = getelementptr inbounds float, float addrspace(1)* %2, i64 %692
  %694 = load float, float addrspace(1)* %693, align 4, !tbaa !7
  %695 = fmul contract float %684, %684
  %696 = fmul contract float %689, %689
  %697 = fadd contract float %695, %696
  %698 = fmul contract float %694, %694
  %699 = fadd contract float %697, %698
  %700 = fcmp olt float %699, 0x39F0000000000000
  %701 = select i1 %700, float 0x41F0000000000000, float 1.000000e+00
  %702 = fmul float %699, %701
  %703 = tail call float @llvm.sqrt.f32(float %702) #3
  %704 = bitcast float %703 to i32
  %705 = add nsw i32 %704, -1
  %706 = bitcast i32 %705 to float
  %707 = add nsw i32 %704, 1
  %708 = bitcast i32 %707 to float
  %709 = icmp sgt i32 %682, -1
  br i1 %709, label %782, label %710

710:                                              ; preds = %672
  switch i32 %682, label %949 [
    i32 -1, label %775
    i32 -2, label %711
  ]

711:                                              ; preds = %710
  %712 = fmul contract float %684, 5.000000e-01
  %713 = load float, float addrspace(1)* %113, align 4, !tbaa !7
  %714 = fadd contract float %28, %713
  %715 = fmul contract float %712, %714
  %716 = fadd contract float %673, %715
  %717 = load float, float addrspace(1)* %114, align 4, !tbaa !13
  %718 = fadd contract float %110, %717
  %719 = fmul contract float %712, %718
  %720 = fadd contract float %677, %719
  %721 = load float, float addrspace(1)* %115, align 4, !tbaa !13
  %722 = fadd contract float %101, %721
  %723 = fmul contract float %712, %722
  %724 = fadd contract float %676, %723
  %725 = load float, float addrspace(1)* %116, align 4, !tbaa !13
  %726 = fadd contract float %102, %725
  %727 = fmul contract float %712, %726
  %728 = fadd contract float %675, %727
  %729 = load float, float addrspace(1)* %117, align 4, !tbaa !13
  %730 = fadd contract float %103, %729
  %731 = fmul contract float %712, %730
  %732 = fadd contract float %674, %731
  %733 = fmul contract float %689, 5.000000e-01
  %734 = load float, float addrspace(1)* %118, align 4, !tbaa !7
  %735 = fadd contract float %33, %734
  %736 = fmul contract float %733, %735
  %737 = fadd contract float %716, %736
  %738 = load float, float addrspace(1)* %119, align 4, !tbaa !13
  %739 = fadd contract float %111, %738
  %740 = fmul contract float %733, %739
  %741 = fadd contract float %720, %740
  %742 = load float, float addrspace(1)* %120, align 4, !tbaa !13
  %743 = fadd contract float %102, %742
  %744 = fmul contract float %733, %743
  %745 = fadd contract float %724, %744
  %746 = load float, float addrspace(1)* %121, align 4, !tbaa !13
  %747 = fadd contract float %105, %746
  %748 = fmul contract float %733, %747
  %749 = fadd contract float %728, %748
  %750 = load float, float addrspace(1)* %122, align 4, !tbaa !13
  %751 = fadd contract float %106, %750
  %752 = fmul contract float %733, %751
  %753 = fadd contract float %732, %752
  %754 = fmul contract float %694, 5.000000e-01
  %755 = load float, float addrspace(1)* %123, align 4, !tbaa !7
  %756 = fadd contract float %38, %755
  %757 = fmul contract float %754, %756
  %758 = fadd contract float %737, %757
  %759 = load float, float addrspace(1)* %124, align 4, !tbaa !13
  %760 = fadd contract float %112, %759
  %761 = fmul contract float %754, %760
  %762 = fadd contract float %741, %761
  %763 = load float, float addrspace(1)* %125, align 4, !tbaa !13
  %764 = fadd contract float %103, %763
  %765 = fmul contract float %754, %764
  %766 = fadd contract float %745, %765
  %767 = load float, float addrspace(1)* %126, align 4, !tbaa !13
  %768 = fadd contract float %106, %767
  %769 = fmul contract float %754, %768
  %770 = fadd contract float %749, %769
  %771 = load float, float addrspace(1)* %127, align 4, !tbaa !13
  %772 = fadd contract float %108, %771
  %773 = fmul contract float %754, %772
  %774 = fadd contract float %753, %773
  br label %949

775:                                              ; preds = %710
  %776 = fmul contract float %76, %684
  %777 = fadd contract float %676, %776
  %778 = fmul contract float %76, %689
  %779 = fadd contract float %675, %778
  %780 = fmul contract float %76, %694
  %781 = fadd contract float %674, %780
  br label %949

782:                                              ; preds = %672
  %783 = tail call i1 @llvm.amdgcn.class.f32(float %702, i32 608) #3
  %784 = select i1 %700, float 0x3EF0000000000000, float 1.000000e+00
  %785 = fneg float %708
  %786 = tail call float @llvm.fma.f32(float %785, float %703, float %702) #3
  %787 = fcmp ogt float %786, 0.000000e+00
  %788 = fneg float %706
  %789 = tail call float @llvm.fma.f32(float %788, float %703, float %702) #3
  %790 = fcmp ole float %789, 0.000000e+00
  %791 = select i1 %790, float %706, float %703
  %792 = select i1 %787, float %708, float %791
  %793 = fmul float %784, %792
  %794 = select i1 %783, float %702, float %793
  %795 = zext i32 %682 to i64
  %796 = getelementptr inbounds float, float addrspace(1)* %3, i64 %795
  %797 = load float, float addrspace(1)* %796, align 4, !tbaa !7
  %798 = add nsw i32 %682, %0
  %799 = sext i32 %798 to i64
  %800 = getelementptr inbounds float, float addrspace(1)* %3, i64 %799
  %801 = load float, float addrspace(1)* %800, align 4, !tbaa !7
  %802 = add nsw i32 %682, %29
  %803 = sext i32 %802 to i64
  %804 = getelementptr inbounds float, float addrspace(1)* %3, i64 %803
  %805 = load float, float addrspace(1)* %804, align 4, !tbaa !7
  %806 = add nsw i32 %682, %34
  %807 = sext i32 %806 to i64
  %808 = getelementptr inbounds float, float addrspace(1)* %3, i64 %807
  %809 = load float, float addrspace(1)* %808, align 4, !tbaa !7
  %810 = add nsw i32 %682, %39
  %811 = sext i32 %810 to i64
  %812 = getelementptr inbounds float, float addrspace(1)* %3, i64 %811
  %813 = load float, float addrspace(1)* %812, align 4, !tbaa !7
  %814 = fdiv contract float %801, %797
  %815 = fdiv contract float %805, %797
  %816 = fdiv contract float %809, %797
  %817 = fmul contract float %814, %814
  %818 = fmul contract float %815, %815
  %819 = fadd contract float %817, %818
  %820 = fmul contract float %816, %816
  %821 = fadd contract float %819, %820
  %822 = fmul contract float %797, 5.000000e-01
  %823 = fmul contract float %822, %821
  %824 = fsub contract float %813, %823
  %825 = fmul contract float %824, 0x3FD9999980000000
  %826 = fmul contract float %825, 0x3FF6666660000000
  %827 = fdiv contract float %826, %797
  %828 = fcmp olt float %827, 0x39F0000000000000
  %829 = select i1 %828, float 0x41F0000000000000, float 1.000000e+00
  %830 = fmul float %827, %829
  %831 = tail call float @llvm.sqrt.f32(float %830) #3
  %832 = bitcast float %831 to i32
  %833 = add nsw i32 %832, -1
  %834 = bitcast i32 %833 to float
  %835 = add nsw i32 %832, 1
  %836 = bitcast i32 %835 to float
  %837 = tail call i1 @llvm.amdgcn.class.f32(float %830, i32 608) #3
  %838 = select i1 %828, float 0x3EF0000000000000, float 1.000000e+00
  %839 = fneg float %836
  %840 = tail call float @llvm.fma.f32(float %839, float %831, float %830) #3
  %841 = fcmp ogt float %840, 0.000000e+00
  %842 = fneg float %834
  %843 = tail call float @llvm.fma.f32(float %842, float %831, float %830) #3
  %844 = fcmp ole float %843, 0.000000e+00
  %845 = select i1 %844, float %834, float %831
  %846 = select i1 %841, float %836, float %845
  %847 = fmul float %838, %846
  %848 = select i1 %837, float %830, float %847
  %849 = fmul contract float %801, %814
  %850 = fadd contract float %849, %825
  %851 = fmul contract float %814, %805
  %852 = fmul contract float %814, %809
  %853 = fmul contract float %805, %815
  %854 = fadd contract float %853, %825
  %855 = fmul contract float %815, %809
  %856 = fmul contract float %809, %816
  %857 = fadd contract float %856, %825
  %858 = fadd contract float %813, %825
  %859 = fmul contract float %814, %858
  %860 = fmul contract float %815, %858
  %861 = fmul contract float %816, %858
  %862 = fmul contract float %794, 0xBFC99999A0000000
  %863 = fmul contract float %862, 5.000000e-01
  %864 = fcmp olt float %821, 0x39F0000000000000
  %865 = select i1 %864, float 0x41F0000000000000, float 1.000000e+00
  %866 = fmul float %821, %865
  %867 = tail call float @llvm.sqrt.f32(float %866) #3
  %868 = bitcast float %867 to i32
  %869 = add nsw i32 %868, -1
  %870 = bitcast i32 %869 to float
  %871 = add nsw i32 %868, 1
  %872 = bitcast i32 %871 to float
  %873 = tail call i1 @llvm.amdgcn.class.f32(float %866, i32 608) #3
  %874 = select i1 %864, float 0x3EF0000000000000, float 1.000000e+00
  %875 = fneg float %872
  %876 = tail call float @llvm.fma.f32(float %875, float %867, float %866) #3
  %877 = fcmp ogt float %876, 0.000000e+00
  %878 = fneg float %870
  %879 = tail call float @llvm.fma.f32(float %878, float %867, float %866) #3
  %880 = fcmp ole float %879, 0.000000e+00
  %881 = select i1 %880, float %870, float %867
  %882 = select i1 %877, float %872, float %881
  %883 = fmul float %874, %882
  %884 = select i1 %873, float %866, float %883
  %885 = fadd contract float %72, %884
  %886 = fadd contract float %99, %885
  %887 = fadd contract float %886, %848
  %888 = fmul contract float %863, %887
  %889 = fsub contract float %24, %797
  %890 = fmul contract float %889, %888
  %891 = fadd contract float %673, %890
  %892 = fsub contract float %43, %813
  %893 = fmul contract float %892, %888
  %894 = fadd contract float %677, %893
  %895 = fsub contract float %28, %801
  %896 = fmul contract float %895, %888
  %897 = fadd contract float %676, %896
  %898 = fsub contract float %33, %805
  %899 = fmul contract float %898, %888
  %900 = fadd contract float %675, %899
  %901 = fsub contract float %38, %809
  %902 = fmul contract float %901, %888
  %903 = fadd contract float %674, %902
  %904 = fmul contract float %684, 5.000000e-01
  %905 = fadd contract float %28, %801
  %906 = fmul contract float %904, %905
  %907 = fadd contract float %906, %891
  %908 = fadd contract float %110, %859
  %909 = fmul contract float %904, %908
  %910 = fadd contract float %909, %894
  %911 = fadd contract float %101, %850
  %912 = fmul contract float %904, %911
  %913 = fadd contract float %912, %897
  %914 = fadd contract float %102, %851
  %915 = fmul contract float %904, %914
  %916 = fadd contract float %915, %900
  %917 = fadd contract float %103, %852
  %918 = fmul contract float %904, %917
  %919 = fadd contract float %918, %903
  %920 = fmul contract float %689, 5.000000e-01
  %921 = fadd contract float %33, %805
  %922 = fmul contract float %920, %921
  %923 = fadd contract float %922, %907
  %924 = fadd contract float %111, %860
  %925 = fmul contract float %920, %924
  %926 = fadd contract float %925, %910
  %927 = fmul contract float %920, %914
  %928 = fadd contract float %927, %913
  %929 = fadd contract float %105, %854
  %930 = fmul contract float %920, %929
  %931 = fadd contract float %930, %916
  %932 = fadd contract float %106, %855
  %933 = fmul contract float %920, %932
  %934 = fadd contract float %933, %919
  %935 = fmul contract float %694, 5.000000e-01
  %936 = fadd contract float %38, %809
  %937 = fmul contract float %935, %936
  %938 = fadd contract float %937, %923
  %939 = fadd contract float %112, %861
  %940 = fmul contract float %935, %939
  %941 = fadd contract float %940, %926
  %942 = fmul contract float %935, %917
  %943 = fadd contract float %942, %928
  %944 = fmul contract float %935, %932
  %945 = fadd contract float %944, %931
  %946 = fadd contract float %108, %857
  %947 = fmul contract float %935, %946
  %948 = fadd contract float %947, %934
  br label %949

949:                                              ; preds = %782, %775, %711, %710
  %950 = phi float [ %938, %782 ], [ %673, %775 ], [ %758, %711 ], [ %673, %710 ]
  %951 = phi float [ %948, %782 ], [ %781, %775 ], [ %774, %711 ], [ %674, %710 ]
  %952 = phi float [ %945, %782 ], [ %779, %775 ], [ %770, %711 ], [ %675, %710 ]
  %953 = phi float [ %943, %782 ], [ %777, %775 ], [ %766, %711 ], [ %676, %710 ]
  %954 = phi float [ %941, %782 ], [ %677, %775 ], [ %762, %711 ], [ %677, %710 ]
  %955 = getelementptr inbounds i32, i32 addrspace(1)* %1, i64 %36
  %956 = load i32, i32 addrspace(1)* %955, align 4, !tbaa !11
  %957 = getelementptr inbounds float, float addrspace(1)* %2, i64 %36
  %958 = load float, float addrspace(1)* %957, align 4, !tbaa !7
  %959 = mul nsw i32 %0, 7
  %960 = add nsw i32 %959, %20
  %961 = sext i32 %960 to i64
  %962 = getelementptr inbounds float, float addrspace(1)* %2, i64 %961
  %963 = load float, float addrspace(1)* %962, align 4, !tbaa !7
  %964 = mul nsw i32 %0, 11
  %965 = add nsw i32 %964, %20
  %966 = sext i32 %965 to i64
  %967 = getelementptr inbounds float, float addrspace(1)* %2, i64 %966
  %968 = load float, float addrspace(1)* %967, align 4, !tbaa !7
  %969 = fmul contract float %958, %958
  %970 = fmul contract float %963, %963
  %971 = fadd contract float %969, %970
  %972 = fmul contract float %968, %968
  %973 = fadd contract float %971, %972
  %974 = fcmp olt float %973, 0x39F0000000000000
  %975 = select i1 %974, float 0x41F0000000000000, float 1.000000e+00
  %976 = fmul float %973, %975
  %977 = tail call float @llvm.sqrt.f32(float %976) #3
  %978 = bitcast float %977 to i32
  %979 = add nsw i32 %978, -1
  %980 = bitcast i32 %979 to float
  %981 = add nsw i32 %978, 1
  %982 = bitcast i32 %981 to float
  %983 = icmp sgt i32 %956, -1
  br i1 %983, label %1056, label %984

984:                                              ; preds = %949
  switch i32 %956, label %1223 [
    i32 -1, label %1049
    i32 -2, label %985
  ]

985:                                              ; preds = %984
  %986 = fmul contract float %958, 5.000000e-01
  %987 = load float, float addrspace(1)* %113, align 4, !tbaa !7
  %988 = fadd contract float %28, %987
  %989 = fmul contract float %986, %988
  %990 = fadd contract float %950, %989
  %991 = load float, float addrspace(1)* %114, align 4, !tbaa !13
  %992 = fadd contract float %110, %991
  %993 = fmul contract float %986, %992
  %994 = fadd contract float %954, %993
  %995 = load float, float addrspace(1)* %115, align 4, !tbaa !13
  %996 = fadd contract float %101, %995
  %997 = fmul contract float %986, %996
  %998 = fadd contract float %953, %997
  %999 = load float, float addrspace(1)* %116, align 4, !tbaa !13
  %1000 = fadd contract float %102, %999
  %1001 = fmul contract float %986, %1000
  %1002 = fadd contract float %952, %1001
  %1003 = load float, float addrspace(1)* %117, align 4, !tbaa !13
  %1004 = fadd contract float %103, %1003
  %1005 = fmul contract float %986, %1004
  %1006 = fadd contract float %951, %1005
  %1007 = fmul contract float %963, 5.000000e-01
  %1008 = load float, float addrspace(1)* %118, align 4, !tbaa !7
  %1009 = fadd contract float %33, %1008
  %1010 = fmul contract float %1007, %1009
  %1011 = fadd contract float %990, %1010
  %1012 = load float, float addrspace(1)* %119, align 4, !tbaa !13
  %1013 = fadd contract float %111, %1012
  %1014 = fmul contract float %1007, %1013
  %1015 = fadd contract float %994, %1014
  %1016 = load float, float addrspace(1)* %120, align 4, !tbaa !13
  %1017 = fadd contract float %102, %1016
  %1018 = fmul contract float %1007, %1017
  %1019 = fadd contract float %998, %1018
  %1020 = load float, float addrspace(1)* %121, align 4, !tbaa !13
  %1021 = fadd contract float %105, %1020
  %1022 = fmul contract float %1007, %1021
  %1023 = fadd contract float %1002, %1022
  %1024 = load float, float addrspace(1)* %122, align 4, !tbaa !13
  %1025 = fadd contract float %106, %1024
  %1026 = fmul contract float %1007, %1025
  %1027 = fadd contract float %1006, %1026
  %1028 = fmul contract float %968, 5.000000e-01
  %1029 = load float, float addrspace(1)* %123, align 4, !tbaa !7
  %1030 = fadd contract float %38, %1029
  %1031 = fmul contract float %1028, %1030
  %1032 = fadd contract float %1011, %1031
  %1033 = load float, float addrspace(1)* %124, align 4, !tbaa !13
  %1034 = fadd contract float %112, %1033
  %1035 = fmul contract float %1028, %1034
  %1036 = fadd contract float %1015, %1035
  %1037 = load float, float addrspace(1)* %125, align 4, !tbaa !13
  %1038 = fadd contract float %103, %1037
  %1039 = fmul contract float %1028, %1038
  %1040 = fadd contract float %1019, %1039
  %1041 = load float, float addrspace(1)* %126, align 4, !tbaa !13
  %1042 = fadd contract float %106, %1041
  %1043 = fmul contract float %1028, %1042
  %1044 = fadd contract float %1023, %1043
  %1045 = load float, float addrspace(1)* %127, align 4, !tbaa !13
  %1046 = fadd contract float %108, %1045
  %1047 = fmul contract float %1028, %1046
  %1048 = fadd contract float %1027, %1047
  br label %1223

1049:                                             ; preds = %984
  %1050 = fmul contract float %76, %958
  %1051 = fadd contract float %953, %1050
  %1052 = fmul contract float %76, %963
  %1053 = fadd contract float %952, %1052
  %1054 = fmul contract float %76, %968
  %1055 = fadd contract float %951, %1054
  br label %1223

1056:                                             ; preds = %949
  %1057 = tail call i1 @llvm.amdgcn.class.f32(float %976, i32 608) #3
  %1058 = select i1 %974, float 0x3EF0000000000000, float 1.000000e+00
  %1059 = fneg float %982
  %1060 = tail call float @llvm.fma.f32(float %1059, float %977, float %976) #3
  %1061 = fcmp ogt float %1060, 0.000000e+00
  %1062 = fneg float %980
  %1063 = tail call float @llvm.fma.f32(float %1062, float %977, float %976) #3
  %1064 = fcmp ole float %1063, 0.000000e+00
  %1065 = select i1 %1064, float %980, float %977
  %1066 = select i1 %1061, float %982, float %1065
  %1067 = fmul float %1058, %1066
  %1068 = select i1 %1057, float %976, float %1067
  %1069 = zext i32 %956 to i64
  %1070 = getelementptr inbounds float, float addrspace(1)* %3, i64 %1069
  %1071 = load float, float addrspace(1)* %1070, align 4, !tbaa !7
  %1072 = add nsw i32 %956, %0
  %1073 = sext i32 %1072 to i64
  %1074 = getelementptr inbounds float, float addrspace(1)* %3, i64 %1073
  %1075 = load float, float addrspace(1)* %1074, align 4, !tbaa !7
  %1076 = add nsw i32 %956, %29
  %1077 = sext i32 %1076 to i64
  %1078 = getelementptr inbounds float, float addrspace(1)* %3, i64 %1077
  %1079 = load float, float addrspace(1)* %1078, align 4, !tbaa !7
  %1080 = add nsw i32 %956, %34
  %1081 = sext i32 %1080 to i64
  %1082 = getelementptr inbounds float, float addrspace(1)* %3, i64 %1081
  %1083 = load float, float addrspace(1)* %1082, align 4, !tbaa !7
  %1084 = add nsw i32 %956, %39
  %1085 = sext i32 %1084 to i64
  %1086 = getelementptr inbounds float, float addrspace(1)* %3, i64 %1085
  %1087 = load float, float addrspace(1)* %1086, align 4, !tbaa !7
  %1088 = fdiv contract float %1075, %1071
  %1089 = fdiv contract float %1079, %1071
  %1090 = fdiv contract float %1083, %1071
  %1091 = fmul contract float %1088, %1088
  %1092 = fmul contract float %1089, %1089
  %1093 = fadd contract float %1091, %1092
  %1094 = fmul contract float %1090, %1090
  %1095 = fadd contract float %1093, %1094
  %1096 = fmul contract float %1071, 5.000000e-01
  %1097 = fmul contract float %1096, %1095
  %1098 = fsub contract float %1087, %1097
  %1099 = fmul contract float %1098, 0x3FD9999980000000
  %1100 = fmul contract float %1099, 0x3FF6666660000000
  %1101 = fdiv contract float %1100, %1071
  %1102 = fcmp olt float %1101, 0x39F0000000000000
  %1103 = select i1 %1102, float 0x41F0000000000000, float 1.000000e+00
  %1104 = fmul float %1101, %1103
  %1105 = tail call float @llvm.sqrt.f32(float %1104) #3
  %1106 = bitcast float %1105 to i32
  %1107 = add nsw i32 %1106, -1
  %1108 = bitcast i32 %1107 to float
  %1109 = add nsw i32 %1106, 1
  %1110 = bitcast i32 %1109 to float
  %1111 = tail call i1 @llvm.amdgcn.class.f32(float %1104, i32 608) #3
  %1112 = select i1 %1102, float 0x3EF0000000000000, float 1.000000e+00
  %1113 = fneg float %1110
  %1114 = tail call float @llvm.fma.f32(float %1113, float %1105, float %1104) #3
  %1115 = fcmp ogt float %1114, 0.000000e+00
  %1116 = fneg float %1108
  %1117 = tail call float @llvm.fma.f32(float %1116, float %1105, float %1104) #3
  %1118 = fcmp ole float %1117, 0.000000e+00
  %1119 = select i1 %1118, float %1108, float %1105
  %1120 = select i1 %1115, float %1110, float %1119
  %1121 = fmul float %1112, %1120
  %1122 = select i1 %1111, float %1104, float %1121
  %1123 = fmul contract float %1075, %1088
  %1124 = fadd contract float %1123, %1099
  %1125 = fmul contract float %1088, %1079
  %1126 = fmul contract float %1088, %1083
  %1127 = fmul contract float %1079, %1089
  %1128 = fadd contract float %1127, %1099
  %1129 = fmul contract float %1089, %1083
  %1130 = fmul contract float %1083, %1090
  %1131 = fadd contract float %1130, %1099
  %1132 = fadd contract float %1087, %1099
  %1133 = fmul contract float %1088, %1132
  %1134 = fmul contract float %1089, %1132
  %1135 = fmul contract float %1090, %1132
  %1136 = fmul contract float %1068, 0xBFC99999A0000000
  %1137 = fmul contract float %1136, 5.000000e-01
  %1138 = fcmp olt float %1095, 0x39F0000000000000
  %1139 = select i1 %1138, float 0x41F0000000000000, float 1.000000e+00
  %1140 = fmul float %1095, %1139
  %1141 = tail call float @llvm.sqrt.f32(float %1140) #3
  %1142 = bitcast float %1141 to i32
  %1143 = add nsw i32 %1142, -1
  %1144 = bitcast i32 %1143 to float
  %1145 = add nsw i32 %1142, 1
  %1146 = bitcast i32 %1145 to float
  %1147 = tail call i1 @llvm.amdgcn.class.f32(float %1140, i32 608) #3
  %1148 = select i1 %1138, float 0x3EF0000000000000, float 1.000000e+00
  %1149 = fneg float %1146
  %1150 = tail call float @llvm.fma.f32(float %1149, float %1141, float %1140) #3
  %1151 = fcmp ogt float %1150, 0.000000e+00
  %1152 = fneg float %1144
  %1153 = tail call float @llvm.fma.f32(float %1152, float %1141, float %1140) #3
  %1154 = fcmp ole float %1153, 0.000000e+00
  %1155 = select i1 %1154, float %1144, float %1141
  %1156 = select i1 %1151, float %1146, float %1155
  %1157 = fmul float %1148, %1156
  %1158 = select i1 %1147, float %1140, float %1157
  %1159 = fadd contract float %72, %1158
  %1160 = fadd contract float %99, %1159
  %1161 = fadd contract float %1160, %1122
  %1162 = fmul contract float %1137, %1161
  %1163 = fsub contract float %24, %1071
  %1164 = fmul contract float %1163, %1162
  %1165 = fadd contract float %950, %1164
  %1166 = fsub contract float %43, %1087
  %1167 = fmul contract float %1166, %1162
  %1168 = fadd contract float %954, %1167
  %1169 = fsub contract float %28, %1075
  %1170 = fmul contract float %1169, %1162
  %1171 = fadd contract float %953, %1170
  %1172 = fsub contract float %33, %1079
  %1173 = fmul contract float %1172, %1162
  %1174 = fadd contract float %952, %1173
  %1175 = fsub contract float %38, %1083
  %1176 = fmul contract float %1175, %1162
  %1177 = fadd contract float %951, %1176
  %1178 = fmul contract float %958, 5.000000e-01
  %1179 = fadd contract float %28, %1075
  %1180 = fmul contract float %1178, %1179
  %1181 = fadd contract float %1180, %1165
  %1182 = fadd contract float %110, %1133
  %1183 = fmul contract float %1178, %1182
  %1184 = fadd contract float %1183, %1168
  %1185 = fadd contract float %101, %1124
  %1186 = fmul contract float %1178, %1185
  %1187 = fadd contract float %1186, %1171
  %1188 = fadd contract float %102, %1125
  %1189 = fmul contract float %1178, %1188
  %1190 = fadd contract float %1189, %1174
  %1191 = fadd contract float %103, %1126
  %1192 = fmul contract float %1178, %1191
  %1193 = fadd contract float %1192, %1177
  %1194 = fmul contract float %963, 5.000000e-01
  %1195 = fadd contract float %33, %1079
  %1196 = fmul contract float %1194, %1195
  %1197 = fadd contract float %1196, %1181
  %1198 = fadd contract float %111, %1134
  %1199 = fmul contract float %1194, %1198
  %1200 = fadd contract float %1199, %1184
  %1201 = fmul contract float %1194, %1188
  %1202 = fadd contract float %1201, %1187
  %1203 = fadd contract float %105, %1128
  %1204 = fmul contract float %1194, %1203
  %1205 = fadd contract float %1204, %1190
  %1206 = fadd contract float %106, %1129
  %1207 = fmul contract float %1194, %1206
  %1208 = fadd contract float %1207, %1193
  %1209 = fmul contract float %968, 5.000000e-01
  %1210 = fadd contract float %38, %1083
  %1211 = fmul contract float %1209, %1210
  %1212 = fadd contract float %1211, %1197
  %1213 = fadd contract float %112, %1135
  %1214 = fmul contract float %1209, %1213
  %1215 = fadd contract float %1214, %1200
  %1216 = fmul contract float %1209, %1191
  %1217 = fadd contract float %1216, %1202
  %1218 = fmul contract float %1209, %1206
  %1219 = fadd contract float %1218, %1205
  %1220 = fadd contract float %108, %1131
  %1221 = fmul contract float %1209, %1220
  %1222 = fadd contract float %1221, %1208
  br label %1223

1223:                                             ; preds = %1056, %1049, %985, %984
  %1224 = phi float [ %1212, %1056 ], [ %950, %1049 ], [ %1032, %985 ], [ %950, %984 ]
  %1225 = phi float [ %1222, %1056 ], [ %1055, %1049 ], [ %1048, %985 ], [ %951, %984 ]
  %1226 = phi float [ %1219, %1056 ], [ %1053, %1049 ], [ %1044, %985 ], [ %952, %984 ]
  %1227 = phi float [ %1217, %1056 ], [ %1051, %1049 ], [ %1040, %985 ], [ %953, %984 ]
  %1228 = phi float [ %1215, %1056 ], [ %954, %1049 ], [ %1036, %985 ], [ %954, %984 ]
  %1229 = getelementptr inbounds float, float addrspace(1)* %4, i64 %22
  store float %1224, float addrspace(1)* %1229, align 4, !tbaa !7
  %1230 = getelementptr inbounds float, float addrspace(1)* %4, i64 %26
  store float %1227, float addrspace(1)* %1230, align 4, !tbaa !7
  %1231 = getelementptr inbounds float, float addrspace(1)* %4, i64 %31
  store float %1226, float addrspace(1)* %1231, align 4, !tbaa !7
  %1232 = getelementptr inbounds float, float addrspace(1)* %4, i64 %36
  store float %1225, float addrspace(1)* %1232, align 4, !tbaa !7
  %1233 = getelementptr inbounds float, float addrspace(1)* %4, i64 %41
  store float %1228, float addrspace(1)* %1233, align 4, !tbaa !7
  ret void
}

; Function Attrs: nofree norecurse nounwind
define protected amdgpu_kernel void @_Z14cuda_time_stepiiPfS_S_S_(i32 %0, i32 %1, float addrspace(1)* nocapture readonly %2, float addrspace(1)* nocapture %3, float addrspace(1)* nocapture readonly %4, float addrspace(1)* nocapture readonly %5) local_unnamed_addr #0 {
  %7 = tail call align 4 dereferenceable(64) i8 addrspace(4)* @llvm.amdgcn.dispatch.ptr() #3
  %8 = getelementptr i8, i8 addrspace(4)* %7, i64 4
  %9 = bitcast i8 addrspace(4)* %8 to i16 addrspace(4)*
  %10 = load i16, i16 addrspace(4)* %9, align 4, !range !4, !invariant.load !5
  %11 = tail call i32 @llvm.amdgcn.workgroup.id.x() #3
  %12 = zext i16 %10 to i64
  %13 = zext i32 %11 to i64
  %14 = mul nuw nsw i64 %12, %13
  %15 = tail call i32 @llvm.amdgcn.workitem.id.x() #3, !range !6
  %16 = zext i32 %15 to i64
  %17 = add nuw nsw i64 %14, %16
  %18 = trunc i64 %17 to i32
  %19 = shl i64 %17, 32
  %20 = ashr exact i64 %19, 32
  %21 = getelementptr inbounds float, float addrspace(1)* %4, i64 %20
  %22 = load float, float addrspace(1)* %21, align 4, !tbaa !7
  %23 = sub nsw i32 4, %0
  %24 = sitofp i32 %23 to float
  %25 = fdiv contract float %22, %24
  %26 = getelementptr inbounds float, float addrspace(1)* %2, i64 %20
  %27 = load float, float addrspace(1)* %26, align 4, !tbaa !7
  %28 = getelementptr inbounds float, float addrspace(1)* %5, i64 %20
  %29 = load float, float addrspace(1)* %28, align 4, !tbaa !7
  %30 = fmul contract float %25, %29
  %31 = fadd contract float %27, %30
  %32 = getelementptr inbounds float, float addrspace(1)* %3, i64 %20
  store float %31, float addrspace(1)* %32, align 4, !tbaa !7
  %33 = shl nsw i32 %1, 2
  %34 = add nsw i32 %33, %18
  %35 = sext i32 %34 to i64
  %36 = getelementptr inbounds float, float addrspace(1)* %2, i64 %35
  %37 = load float, float addrspace(1)* %36, align 4, !tbaa !7
  %38 = getelementptr inbounds float, float addrspace(1)* %5, i64 %35
  %39 = load float, float addrspace(1)* %38, align 4, !tbaa !7
  %40 = fmul contract float %25, %39
  %41 = fadd contract float %37, %40
  %42 = getelementptr inbounds float, float addrspace(1)* %3, i64 %35
  store float %41, float addrspace(1)* %42, align 4, !tbaa !7
  %43 = add nsw i32 %18, %1
  %44 = sext i32 %43 to i64
  %45 = getelementptr inbounds float, float addrspace(1)* %2, i64 %44
  %46 = load float, float addrspace(1)* %45, align 4, !tbaa !7
  %47 = getelementptr inbounds float, float addrspace(1)* %5, i64 %44
  %48 = load float, float addrspace(1)* %47, align 4, !tbaa !7
  %49 = fmul contract float %25, %48
  %50 = fadd contract float %46, %49
  %51 = getelementptr inbounds float, float addrspace(1)* %3, i64 %44
  store float %50, float addrspace(1)* %51, align 4, !tbaa !7
  %52 = shl nsw i32 %1, 1
  %53 = add nsw i32 %52, %18
  %54 = sext i32 %53 to i64
  %55 = getelementptr inbounds float, float addrspace(1)* %2, i64 %54
  %56 = load float, float addrspace(1)* %55, align 4, !tbaa !7
  %57 = getelementptr inbounds float, float addrspace(1)* %5, i64 %54
  %58 = load float, float addrspace(1)* %57, align 4, !tbaa !7
  %59 = fmul contract float %25, %58
  %60 = fadd contract float %56, %59
  %61 = getelementptr inbounds float, float addrspace(1)* %3, i64 %54
  store float %60, float addrspace(1)* %61, align 4, !tbaa !7
  %62 = mul nsw i32 %1, 3
  %63 = add nsw i32 %62, %18
  %64 = sext i32 %63 to i64
  %65 = getelementptr inbounds float, float addrspace(1)* %2, i64 %64
  %66 = load float, float addrspace(1)* %65, align 4, !tbaa !7
  %67 = getelementptr inbounds float, float addrspace(1)* %5, i64 %64
  %68 = load float, float addrspace(1)* %67, align 4, !tbaa !7
  %69 = fmul contract float %25, %68
  %70 = fadd contract float %66, %69
  %71 = getelementptr inbounds float, float addrspace(1)* %3, i64 %64
  store float %70, float addrspace(1)* %71, align 4, !tbaa !7
  ret void
}

; Function Attrs: nofree nosync nounwind readnone speculatable willreturn
declare float @llvm.sqrt.f32(float) #1

; Function Attrs: nofree nosync nounwind readnone speculatable willreturn
declare float @llvm.fma.f32(float, float, float) #1

; Function Attrs: nounwind readnone speculatable willreturn
declare i1 @llvm.amdgcn.class.f32(float, i32) #2

; Function Attrs: nounwind readnone speculatable willreturn
declare align 4 i8 addrspace(4)* @llvm.amdgcn.dispatch.ptr() #2

; Function Attrs: nounwind readnone speculatable willreturn
declare i32 @llvm.amdgcn.workgroup.id.x() #2

; Function Attrs: nounwind readnone speculatable willreturn
declare i32 @llvm.amdgcn.workitem.id.x() #2

attributes #0 = { nofree norecurse nounwind "amdgpu-flat-work-group-size"="1,1024" "amdgpu-implicitarg-num-bytes"="56" "amdgpu-unsafe-fp-atomics"="true" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="gfx906" "target-features"="+16-bit-insts,+ci-insts,+dl-insts,+dot1-insts,+dot2-insts,+dpp,+flat-address-space,+gfx8-insts,+gfx9-insts,+s-memrealtime" "uniform-work-group-size"="true" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nofree nosync nounwind readnone speculatable willreturn }
attributes #2 = { nounwind readnone speculatable willreturn }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!opencl.ocl.version = !{!2}
!llvm.ident = !{!3}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 1}
!2 = !{i32 2, i32 0}
!3 = !{!"clang version 12.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-4.2.0 21161 b204d7f0cae65b6cd4446eec50fc1fb675d582af)"}
!4 = !{i16 1, i16 1025}
!5 = !{}
!6 = !{i32 0, i32 1024}
!7 = !{!8, !8, i64 0}
!8 = !{!"float", !9, i64 0}
!9 = !{!"omnipotent char", !10, i64 0}
!10 = !{!"Simple C++ TBAA"}
!11 = !{!12, !12, i64 0}
!12 = !{!"int", !9, i64 0}
!13 = !{!9, !9, i64 0}
